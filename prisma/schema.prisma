// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

enum Sex {
  masculino
  femenino
}

enum RoleTypes {
  ASESOR
  CAPTURISTA
  JEFE_CAPTURA
  TITULAR_RUTA
  SUPERVISOR
  GERENCIA
  SUBGERENTE
  DIRECTOR
  ADMIN
}

enum Type {
  EMPLEADO
  LIDER
  NORMAL
}

enum Status {
  ACTIVO
  VENCIDO
  LIQUIDADO
  RENOVADO
  FALLECIDO
}

enum PaymentStatus {
  PAGO
  PAGO_INCOMPLETO
  NO_PAGO
  ADELANTO
  GARANTIA
}

model User {
  id Int @id @default(autoincrement())
  email String   @unique
  username String   @unique
  name String
  lastNameFirst String
  lastNameSecond String?
  fullName String
  password String
  isActive Boolean @default(true)
  roleId Int
  role Role @relation(fields: [roleId], references: [id])
  address String
  sex Sex
  avatar String?
  agentsRoutes AgentRoute[]
  payment_detail PaymentDetail[]
}

model Role {
  id Int @id @default(autoincrement())
  role RoleTypes @unique
  users User[]
  permissions Permission[]
}

model Module {
  id Int @id @default(autoincrement())
  name String
  isActive Boolean
  permissions Permission[]
}

model Permission {
  id Int @id @default(autoincrement())
  name String
  description String
  module Module @relation(fields: [moduleId], references: [id])
  moduleId Int
  roles Role[]
}

model Route {
  id Int @id @default(autoincrement())
  name Int @unique
  isActive Boolean @default(true)
  agentsRoutes AgentRoute[]
  folders Folder[]
}

model AgentRoute {
  id Int @id @default(autoincrement())
  userId Int
  routeId Int
  route Route @relation(fields: [routeId], references: [id])
  user User @relation(fields: [userId], references: [id])
  assignAt DateTime @default(now()) @db.Date
  @@unique([userId, assignAt])
}

model Municipality {
  id Int @id @default(autoincrement())
  name String @unique
  towns Town[]
}

model Town {
  id Int @id @default(autoincrement())
  name String @unique
  municipalityId Int 
  municipality Municipality @relation(fields: [municipalityId], references: [id])
  folders Folder[]
}

model Folder {
 id Int @id @default(autoincrement())
 consecutive Int
 name String @unique
 townId Int
 town Town @relation(fields: [townId], references: [id])
 routeId Int
 route Route @relation(fields: [routeId], references: [id])
 isActive Boolean @default(true)
 groups Group[]
 leaders Leader[]
 credits Credit[]
}


model Group {
 id Int @id @default(autoincrement())
 name Int 
 folderId Int
 folder Folder @relation(fields: [folderId], references: [id])
 credits Credit[]
 successor  Group?  @relation("GroupHistory")
 predecessorId Int? @unique
 predecessor Group? @relation("GroupHistory", fields: [predecessorId], references: [id])
 @@unique([name, folderId])
}

model Client {
  id Int @id @default(autoincrement())
  name String
  lastNameFirst String
  lastNameSecond String?
  fullname String
  address String
  reference String
  // curp String @unique
  curp String
  phoneNumber String?
  isActive Boolean @default(true)
  credits Credit[]
  isDeceased Boolean @default(false)
}

model Leader {
  id Int @id @default(autoincrement())
  name String
  lastNameFirst String
  lastNameSecond String?
  fullname String
  curp String @unique
  address String
  birthday DateTime @db.Date
  anniversaryDate DateTime @db.Date
  unsubscribeDate DateTime?
  unsubscribeReason String?
  folderId Int @unique
  isActive Boolean @default(true)
  folder Folder @relation(fields: [folderId], references: [id])
}


model Aval {
  id Int @id @default(autoincrement())
  name String
  lastNameFirst String
  lastNameSecond String?
  fullname String
  address String
  reference String
  // curp String @unique
  curp String
  phoneNumber String?
  credits Credit[]
}

model Credit {
  id Int @id @default(autoincrement())
  avalId Int
  aval Aval @relation(fields: [avalId], references: [id])
  clientId Int
  client Client @relation(fields: [clientId], references: [id])
  groupId Int
  group Group @relation(fields: [groupId], references: [id])
  folderId Int
  folder Folder @relation(fields: [folderId], references: [id])
  previousCreditId Int? @unique
  previousCredit  Credit?  @relation("RenovateOwnerHistory", fields: [previousCreditId], references: [id])
  renovateCredit Credit? @relation("RenovateOwnerHistory")
  previousStatus Status?
  type Type @default(NORMAL)
  amount Decimal @db.Decimal(6,2)
  paymentAmount Decimal @db.Decimal(5,2)
  totalAmount Decimal @db.Decimal(6,2)
  captureAt DateTime @default(now())
  creditAt DateTime @db.Date
  canRenovate Boolean @default(false)
  clientGuarantee String
  avalGuarantee String
  paymentForgivent Int?
  isRenovate Boolean @default(false)
  nextPayment DateTime @db.Date
  lastPayment DateTime? @db.Date
  currentDebt Decimal @db.Decimal(6,2)
  countPayments Int @default(0)
  status Status @default(ACTIVO)
  payment_detail PaymentDetail[]
  // @@unique([clientId, groupId, folderId])
}

model PaymentDetail {
  id Int @id @default(autoincrement())
  creditId Int
  credit Credit @relation(fields: [creditId], references: [id])
  agent User @relation(fields: [agentId], references: [id])
  paymentAmount Decimal @db.Decimal(6,2)
  paymentDate DateTime @db.Date
  captureAt DateTime @default(now())
  agentId Int
  folio Int?
  notes String?
  status PaymentStatus
}

